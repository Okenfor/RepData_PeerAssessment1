set.seed(1)
rpois(5,2)
library(datasets)
ls
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y = rnomr(10)
y = rnomr(0,1)
y = rnom(0,1)
y = rnorm(10)
x = 1:10
x1 = 1:10
x2 = rnorm(10,0,2)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students
students2
gather(students,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
separate(res,sex_class,sex,class)
?separate
separate(res,sex_class,c("sex","class"))
submit(
)
students3
submit()
?spread
?spread
submit()
submit()
submit()
extract_numeric("class5")
install.packages("dplyr")
swirl()
library(swirl)
swirl()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed,failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubradate)
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(15081985)
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("1920//1//2")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 12, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone = "Amercua/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("~/workspace/GitHub/RepData_PeerAssessment1")
activity <- read.csv("activity.csv", stringsAsFactors=F)
activity$date2 <- strptime (activity$date, "%Y-%m-%d")
attach(activity)
aggdata <-aggregate(activity$steps, by=list(date), FUN=sum, na.rm=TRUE)
print(aggdata)
detach(activity)
library(ggplot2)
aggdata$Total_Steps <- aggdata$x
plot <- ggplot(aggdata, aes(x=Total_Steps))
plot <- plot +  geom_histogram(aes(y=..density..), binwidth = 500, colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
print(plot)
```
The mean and the median of the total number of steps are calculated. Then, mean (<span style="color:red">red line</span>) and the median (<span style="color:blue">blue line</span>) are plotted in the histogram created abode.
```{r echo=TRUE}
mean <- mean(aggdata$x)
median <- median(aggdata$x)
mean
median
plot <- plot + geom_vline(aes(xintercept=mean), color="red", linetype="dashed", size=1, labels = c("mean")) + geom_vline(aes(xintercept=median), color="blue", linetype="dashed", size=1, labels = c("median"))
print(plot)
```
## What is the average daily activity pattern?
In order to describe the average daily activity pattern, an average per interval is calculated, across all days. Further, a time series of the average calculated is plot.
```{r echo=TRUE}
attach(activity)
aggdata2 <-aggregate(steps, by=list(interval), FUN=mean, na.rm=TRUE)
detach(activity)
library(ggplot2)
aggdata2$Avg_Steps <- aggdata2$x
aggdata2$Interval <- aggdata2$Group.1
plot2 <- ggplot(aggdata2, aes(Interval, Avg_Steps))
plot2 <- plot2 +  geom_line() + ylab("Daily average")
print(plot2)
```
The maximum number of steps on average across all days is:
```{r echo=TRUE}
maximum <- max(aggdata2$Avg_Steps)
maximum
```
The interval with the maximum number of steps on average calculated is:
```{r echo=TRUE}
Interval_WithMax <- aggdata2[aggdata2$Avg_Steps == maximum, "Interval"]
Interval_WithMax
```
The maximum interval is reported in the plot below.
```{r echo=TRUE}
plot2 <- plot2 + geom_vline(aes(xintercept=Interval_WithMax), color="blue", linetype="dashed", size=1) + geom_hline(aes(yintercept=maximum), color="blue", linetype="dashed", size=1)
print(plot2)
```
## Imputing missing values
In order to impute missing values, first the number of them are calculated. For that purpose, is.na function is used.
```{r echo=TRUE}
sum(is.na(activity$steps))
```
attach(activity)
aggdata2 <-aggregate(steps, by=list(interval), FUN=median, na.rm=TRUE)
detach(activity)
aggdata2$Median_Steps <- aggdata2$x
aggdata2$Interval <- aggdata2$Group.1
attach(activity)
aggdata3 <-aggregate(steps, by=list(interval), FUN=median, na.rm=TRUE)
detach(activity)
aggdata3$Median_Steps <- aggdata2$x
aggdata3$Interval <- aggdata2$Group.1
aggdata3$Median_Steps <- aggdata3$x
aggdata3$Interval <- aggdata3$Group.1
aggdata3
attach(activity)
aggdata2 <-aggregate(steps, by=list(interval), FUN=mean, na.rm=TRUE)
detach(activity)
View(aggdata2)
aggdata2
aggdata2$Avg_Steps <- aggdata2$x
aggdata2$Interval <- aggdata2$Group.1
activity[is.na(activity$steps) & activity$interval == aggdata2$Interval]
activity[is.na(activity$steps) & activity$interval == aggdata2$Interval,]
activity[is.na(activity$steps) & activity$interval == aggdata2$Interval,"steps"] <- aggdata2$Avg_Steps
View(activity)
library(ggplot2)
aggdata2$Avg_Steps <- aggdata2$x
aggdata2$Interval <- aggdata2$Group.1
plot2 <- ggplot(aggdata2, aes(Interval, Avg_Steps))
plot2 <- plot2 +  geom_line() + ylab("Daily average")
print(plot2)
attach(activity)
aggdata2 <-aggregate(steps, by=list(interval), FUN=mean, na.rm=TRUE)
detach(activity)
library(ggplot2)
aggdata2$Avg_Steps <- aggdata2$x
aggdata2$Interval <- aggdata2$Group.1
plot2 <- ggplot(aggdata2, aes(Interval, Avg_Steps))
plot2 <- plot2 +  geom_line() + ylab("Daily average")
print(plot2)
nas <- which(is.na(activity$steps), arr.ind=TRUE)
activity <- read.csv("activity.csv", stringsAsFactors=F)
activity$date2 <- strptime (activity$date, "%Y-%m-%d")
nas <- which(is.na(activity$steps), arr.ind=TRUE)
View(activity)
aggdata2
sum(is.na(activity$steps))
nas <- which(is.na(activity$steps), arr.ind=TRUE)
for (i in 1:length(nas) ) {
activity[nas[i],"steps"] <- aggdata2[activity[nas[i],"interval"] == aggdata2$Interval, "Avg_Steps"]
}
View(activity)
attach(activity)
aggdata3 <-aggregate(steps, by=list(interval), FUN=mean, na.rm=TRUE)
detach(activity)
library(ggplot2)
aggdata3$Avg_Steps <- aggdata3$x
aggdata3$Interval <- aggdata3$Group.1
plot3 <- ggplot(aggdata3, aes(Interval, Avg_Steps))
plot3 <- plot3 +  geom_line() + ylab("Daily average")
print(plot3)
par(mfrow=c(1,2))
print(plot2)
print(plot3)
multiplot(plot2, plot3, cols=2)
library(multiplot)
library(gridExtra)
grid.arrange(plot2, plot3, ncol=2)
activity <- read.csv("activity.csv", stringsAsFactors=F)
activity$date2 <- strptime (activity$date, "%Y-%m-%d")
nas <- which(is.na(activity$steps), arr.ind=TRUE)
sum(is.na(activity$steps))
activityWithoutNAs <- activity
for (i in 1:length(nas) ) {
activityWithoutNAs[nas[i],"steps"] <- aggdata2[activity[nas[i],"interval"] == aggdata2$Interval, "Avg_Steps"]
}
View(activity)
View(activityWithoutNAs)
attach(activityWithoutNAs)
aggdata3 <-aggregate(activityWithoutNAs$steps, by=list(date), FUN=sum, na.rm=TRUE)
detach(activityWithoutNAs)
library(ggplot2)
aggdata3$Total_Steps <- aggdata3$x
plot3 <- ggplot(aggdata3, aes(x=Total_Steps))
plot3 <- plot3 +  geom_histogram(aes(y=..density..), binwidth = 500, colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
print(plot3)
library(gridExtra)
grid.arrange(plot, plot3, ncol=2)
mean3 <- mean(aggdata3$x)
median3 <- median(aggdata3$x)
plot3 <- plot3 + geom_vline(aes(xintercept=mean), color="red", linetype="dashed", size=1, labels = c("mean")) + geom_vline(aes(xintercept=median), color="blue", linetype="dashed", size=1, labels = c("median"))
library(gridExtra)
grid.arrange(plot, plot3, ncol=2)
plot3 <- ggplot(aggdata3, aes(x=Total_Steps))
plot3 <- plot3 +  geom_histogram(aes(y=..density..), binwidth = 500, colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
print(plot3)
mean3 <- mean(aggdata3$x)
median3 <- median(aggdata3$x)
mean3
median3
plot3 <- plot3 + geom_vline(aes(xintercept=mean3), color="red", linetype="dashed", size=1, labels = c("mean")) + geom_vline(aes(xintercept=median3), color="blue", linetype="dashed", size=1, labels = c("median"))
library(gridExtra)
grid.arrange(plot, plot3, ncol=2)
weekdays(activityWithoutNAs$date2, abbreviate = FALSE)
weekdays(activityWithoutNAs$date2, abbreviate = T)
unique(weekdays(activityWithoutNAs$date2, abbreviate = T))
activityWithoutNAs$weekdays <- (weekdays(activityWithoutNAs$date2, abbreviate = T))
activityWithoutNAs$weekdaysType <- if (activityWithoutNAs$weekdays %in% c("Sat","Sun"){ "Weekend" } else {"Weekday"})
activityWithoutNAs$weekdaysType <- if (activityWithoutNAs$weekdays %in% c("Sat","Sun")){ "Weekend" } else {"Weekday"})
activityWithoutNAs$weekdaysType <- if (activityWithoutNAs$weekdays %in% c("Sat","Sun")){ "Weekend" } else {"Weekday"}
for(i in 1:length(activityWithoutNAs)){
activityWithoutNAs[i]$weekdaysType <- if (activityWithoutNAs[i]$weekdays %in% c("Sat","Sun")){ "Weekend" } else {"Weekday"}
}
for(i in 1:length(activityWithoutNAs)){
activityWithoutNAs[i, "weekdaysType"] <- if (activityWithoutNAs[i,"weekdays"] %in% c("Sat","Sun")){ "Weekend" } else {"Weekday"}
}
View(activityWithoutNAs)
unique(activityWithoutNAs$weekdays)
unique(activityWithoutNAs$weekdaysType)
for(i in 1:length(activityWithoutNAs)){
activityWithoutNAs[i, "weekdaysType"] <- if (activityWithoutNAs[i,"weekdays"] == "Sat" | activityWithoutNAs[i,"weekdays"] == "Sun") { "Weekend" } else {"Weekday"}
}
unique(activityWithoutNAs$weekdaysType)
unique(activityWithoutNAs$weekdays)
for(i in 1:length(activityWithoutNAs)){
if (activityWithoutNAs[i,"weekdays"] == "Sat" | activityWithoutNAs[i,"weekdays"] == "Sun")
{ activityWithoutNAs[i, "weekdaysType"] <- "Weekend" }
else {activityWithoutNAs[i, "weekdaysType"] <- "Weekday"}
}
unique(activityWithoutNAs$weekdays)
unique(activityWithoutNAs$weekdaysType)
activityWithoutNAs[i,"weekdays"] == "Sat"
activityWithoutNAs[,"weekdays"] == "Sat"
